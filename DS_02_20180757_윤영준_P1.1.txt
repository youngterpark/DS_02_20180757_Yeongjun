<실습과제 1.1>
nXn행렬이 주어졌을 때 이 행렬의 전치 행렬을 구하는 알고리즘을 의사코드로 기술한다.

[주석x] 주석 없는 수도코드가 보기가 편해 2개로 나눠 작성하였습니다.
Algorithm Transpose_Mat(A,n) 
Input : n개의 양의 정수 값을 갖는 배열 A 
Output : 전치행렬 B 
i <- 1 
j <- 1 
while (i <= n) do 
	while (j <= n) do 
		B[i][j] <- A[j][i] 
		j <- j + 1 
	i <- i + 1 
end while
return B

[주석O]
Algorithm Transpose_Mat(A,n) //nXn 행렬의 A를 넣는 함수로, 행렬 A의 전치행렬인 행렬 B를 출력해준다.
Input : n개의 양의 정수 값을 갖는 배열 A //nXn 행렬 A를 Input함
Output : 전치행렬 B //행렬 A의 전치행렬 B를 Output함
i <- 1 //행 i
j <- 1 //열 j
while (i <= n) do //행 i, n번 반복을 위한 코드
	while (j <= n) do //열 j, n번 반복을 위한 코드
		B[i][j] <- A[j][i] // "행렬 B의 행 = 행렬 A의 열, 행렬 B의 열 = 행렬 A의 행"으로 구성
		j <- j + 1 //열 j, n번 반복을 위한 코드
	i <- i + 1 //행 i, n번 반복을 위한 코드
end while
return B //전치행렬 B 출력

[알고리즘의 시간 복잡도 분석]                 	        s/e 		Frequency		Total steps
Algorithm Transpose_Mat(A,n) 				 0		    0			     0
Input : n개의 양의 정수 값을 갖는 배열 A		 	 0		    0			     0
Output : 전치행렬 B 					 0		    0			     0
i <- 1 							 1		    1			     1
j <- 1 							 1		    1			     1
while (i <= n) do 					 1		   n+1		    	    n+1
	while (j <= n) do 				 1		  n(n+1)		   n^2+n
		B[i][j] <- A[j][i] 			 1		   n^2		  	    n^2
		j <- j + 1 				 1		   n^2			    n^2
	i <- i + 1 					 1		    n			     n
end while						 1		    1			     1
return B						 1		    1			     1

			total						 3n^2+3n+3

[빅오 표기법]
f(n) = 3n^2+3n+3 = O(n^2)


[과제에 대한 고찰]
간단한 과제를 통해 수도코드 작성하는 방법을 배우게 되었고,
빅오 표기법으로 시간 복잡도를 표현하며 시간 복잡도 개념에 대해 이해하게 되었다.
